{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACtB,mCAAML,EAAMI,QAAQE,QACpB,kCAAKN,EAAMI,QAAQG,aCHdC,EAAW,SAACR,GAEzB,OADIS,QAAQC,IAAIV,GACR,qBAAKC,UAAU,YAAf,SAEDD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCA3CQ,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAYC,EAAf,EAAeA,aAAf,OACxB,uBAAOC,KAAK,SAASf,UAAU,SAASa,YAAcA,EAC/CG,SAAUF,MCoCFG,G,wDApCb,aAAc,IAAD,8BACX,gBAeFH,aAAe,SAACI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAO,CACZb,SAAS,GACTU,YAAY,IAJD,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAQ3C,WAAS,IAAD,EAC2BC,KAAKN,MAA9Bb,EADF,EACEA,SAASU,EADX,EACWA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA5B,GAAO,OAC9CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAKhC,UAAU,MAAf,UACA,mDACA,cAAC,EAAD,CAAaa,YAAY,kBACvBC,aAAce,KAAKf,eACrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9BRI,cCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6ce57ff3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2> {props.monster.name}</h2>\r\n        <p> {props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n    console.log(props);\r\nreturn (<div className='card-list'>\r\n   {\r\n       props.monsters.map(monster => <Card key={monster.id} monster={monster} />)\r\n   }\r\n</div>)}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n//functional component vs class component like app.js have access to the state\r\n//does not have access to life cycle method\r\n\r\n//gets props and return html method\r\n\r\nexport const SearchBox =({ placeholder,handleChange }) =>(\r\n<input type='search' className='search' placeholder= {placeholder}\r\n       onChange={handleChange } />\r\n)","\nimport React,{ Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state ={\n    monsters:[],\n    searchField:''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users}))\n\n  \n  }\n\n  handleChange = (e) => {\n     this.setState({searchField: e.target.value})\n  }\n  render(){\n    const { monsters,searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n      <h1>Monsters Rolodex </h1>\n      <SearchBox   placeholder='search monsters'\n        handleChange={this.handleChange} />\n      <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}